# ============================================================================
# CI/CD Pipeline for FastAPI Application
# ============================================================================
# This workflow demonstrates a complete CI/CD pipeline that:
# 1. Runs automated tests when code is pushed
# 2. Only deploys if tests pass (quality gate)
# 3. Automatically deploys to a remote server
# ============================================================================

name: Deploy FastAPI App

# ============================================================================
# TRIGGERS - When this pipeline runs
# ============================================================================
on:
  push:
    branches:
      - main   # 👈 triggers only when you push to the 'main' branch
               # This ensures we only deploy stable code from the main branch

# ============================================================================
# JOBS - The main sections of our pipeline
# ============================================================================
jobs:
  # ========================================================================
  # JOB 1: TESTING PHASE
  # ========================================================================
  # This job runs first and validates our code quality
  # If this fails, deployment won't happen (quality gate)
  # ========================================================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest  # GitHub provides free Ubuntu runners
    
    steps:
      # ----------------------------------------------------------------
      # Step 1: Get the latest code from repository
      # ----------------------------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v4
        # This downloads your repository code to the runner
      
      # ----------------------------------------------------------------
      # Step 2: Setup Python environment
      # ----------------------------------------------------------------
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'  # Use Python 3.11 (matches your local setup)
      
      # ----------------------------------------------------------------
      # Step 3: Install project dependencies
      # ----------------------------------------------------------------
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  # Always use latest pip
          pip install -r requirements.txt      # Install FastAPI, pytest, etc.
      
      # ----------------------------------------------------------------
      # Step 4: Run automated tests
      # ----------------------------------------------------------------
      - name: Run tests
        run: pytest test_main.py -v
        # -v flag shows verbose output (helpful for debugging)
        # If any test fails, this job fails and deployment stops

  # ========================================================================
  # JOB 2: DEPLOYMENT PHASE
  # ========================================================================
  # This job only runs if the test job succeeds
  # It deploys the application to your remote server
  # ========================================================================
  deploy:
    name: Deploy to Ubuntu VM
    runs-on: ubuntu-latest
    #needs: test  # 👈 CRITICAL: Only run deployment if tests pass
                 # This is our "quality gate" - prevents bad code from being deployed

    steps:
      # ----------------------------------------------------------------
      # Step 1: Download repository code to GitHub runner
      # ----------------------------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v4
        # Required for GitHub Actions context and accessing secrets

      # ----------------------------------------------------------------
      # Step 2: Setup SSH connection to your server
      # ----------------------------------------------------------------
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          # This uses your SSH private key stored in GitHub Secrets
          # to authenticate with your remote server

      # ----------------------------------------------------------------
      # Step 3: Deploy application to remote server
      # ----------------------------------------------------------------
      # This step runs commands on your remote server via SSH
      - name: Deploy FastAPI to VM
        run: |
          # Connect to your server and run deployment commands
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            # ========================================================================
            # SERVER-SIDE DEPLOYMENT SCRIPT
            # ========================================================================
            # All commands below run on your remote server, not on GitHub
            # This is why we use SSH to connect and execute commands remotely
            
            set -e  # Exit immediately if any command fails (fail-fast behavior)
            echo "🚀 Starting deployment on server..."

            # ========================================================================
            # CONFIGURATION - Define paths and repository information
            # ========================================================================
            BASE_PATH=${{ secrets.PROJECT_PATH }}         # e.g., /home/azureuser
            PROJECT_DIR="$BASE_PATH/cicd"                 # Where our app lives
            REPO_URL="https://github.com/rishika-patel-1/cicd.git"

            # ========================================================================
            # CODE SYNCHRONIZATION - Get latest code from GitHub
            # ========================================================================
            # Check if this is a fresh deployment or an update
            if [ -d "$PROJECT_DIR/.git" ]; then
              echo "📂 Project already exists. Pulling latest changes..."
              cd "$PROJECT_DIR"
              git fetch origin main      # Get latest commits from GitHub
              git reset --hard origin/main  # Reset to match GitHub exactly
            else
              echo "🆕 Project not found. Cloning fresh repository..."
              cd "$BASE_PATH"
              git clone $REPO_URL cicd   # Clone the repository for first time
              cd cicd
            fi

            # ========================================================================
            # PYTHON ENVIRONMENT SETUP - Create isolated Python environment
            # ========================================================================
            echo "📦 Setting up Python environment..."
            python3 -m venv venv              # Create virtual environment
            source venv/bin/activate         # Activate the virtual environment
            pip install --upgrade pip        # Ensure we have latest pip
            pip install -r requirements.txt  # Install FastAPI, pytest, etc.
            # Virtual environments prevent dependency conflicts between projects

            # ========================================================================
            # ENVIRONMENT VARIABLES - Load configuration (if exists)
            # ========================================================================
            # This is where you'd load API keys, database URLs, etc.
            if [ -f ".env" ]; then
              echo "🔐 Loading environment variables..."
              export $(cat .env | xargs)     # Load variables from .env file
            else
              echo "⚠️ No .env file found, skipping variable loading."
              # For production, you might want to fail here if .env is required
            fi

            # ========================================================================
            # PROCESS MANAGEMENT - Stop old version before starting new one
            # ========================================================================
            echo "🛑 Stopping existing FastAPI process..."
            pkill -f "python3 main.py" || true
            # || true means "don't fail if no process was found to kill"
            # This prevents deployment failure on first run

            # ========================================================================
            # APPLICATION STARTUP - Start the new version
            # ========================================================================
            echo "🚀 Starting FastAPI app with nohup..."
            nohup venv/bin/python3 main.py > app.log 2>&1 &
            # nohup = run in background, survive terminal disconnect
            # > app.log = redirect output to log file
            # 2>&1 = redirect errors to same log file
            # & = run in background

            echo "✅ Deployment complete! Check app.log for details."
            # The app is now running and accessible on your server
          EOF
